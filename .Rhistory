# --- Machine Learning - Project submission code.
# ------------------------------------------------------------
# Read training CSV into R
training <- read.csv(file="pml-training.csv", header=TRUE, sep=",")
# Read testing CSV into R
testing <- read.csv(file="pml-testing.csv", header=TRUE, sep=",")
# ----------------------------------------------------------------------------------
# Load caret library
library(caret)
# Determine  the NON-relevant variables from the training set
# --------------------------------------------------------------
# nsv = nearZeroVar(training, saveMetrics=TRUE)
# Update the training data set with the relevant variables only.
# The original training data set has 160 columns, now it has only 100
# training = training[, which(nsv$nzv==FALSE)]
# testing = testing[, which(nsv$nzv==FALSE)]
# ----------------------------------------------
cols = c("user_name",
"accel_belt_x",
"accel_belt_y",
"accel_belt_z",
"accel_arm_x",
"accel_arm_y",
"accel_arm_z",
"accel_dumbbell_x",
"accel_dumbbell_y",
"accel_dumbbell_z",
"accel_forearm_x",
"accel_forearm_y",
"accel_forearm_z",
"classe")
cols1 = c("user_name",
"accel_belt_x",
"accel_belt_y",
"accel_belt_z",
"accel_arm_x",
"accel_arm_y",
"accel_arm_z",
"accel_dumbbell_x",
"accel_dumbbell_y",
"accel_dumbbell_z",
"accel_forearm_x",
"accel_forearm_y",
"accel_forearm_z")
training = subset(training, select=c(cols))
testing = subset(testing, select=c(cols1))
dim(training)
dim(testing)
# ---------------------------------------------------------
# Building (fitting) the model with the training dataset
set.seed(1225)
modelFit = randomForest(classe ~ ., data=training, keep.forest=TRUE, importance=TRUE)
# See final model results
modelFit$finalModel
# Predict with the testing dataset
predictions = predict(modelFit, newdata=testing)
# See results of the predictions
# Should only retrieve 20 rows based on the testing dataset
predictions
# See "In Sample Errors (and error rate)
# Error rate = 19%; Accuracy = 81 %
modelFit$confusion
# ------------------------------------------------------
# -- See misclasification
#library(tree)
#summary(tree(classe ~ ., data=training))
# ------------------------------------------------------
library(randomforest)
install.packages("randomForest")
library(randomforest)
# --- Machine Learning - Project submission code.
# ------------------------------------------------------------
# Read training CSV into R
training <- read.csv(file="pml-training.csv", header=TRUE, sep=",")
# Read testing CSV into R
testing <- read.csv(file="pml-testing.csv", header=TRUE, sep=",")
# ----------------------------------------------------------------------------------
# Load caret library
library(caret)
# Determine  the NON-relevant variables from the training set
# --------------------------------------------------------------
# nsv = nearZeroVar(training, saveMetrics=TRUE)
# Update the training data set with the relevant variables only.
# The original training data set has 160 columns, now it has only 100
# training = training[, which(nsv$nzv==FALSE)]
# testing = testing[, which(nsv$nzv==FALSE)]
# ----------------------------------------------
cols = c("user_name",
"accel_belt_x",
"accel_belt_y",
"accel_belt_z",
"accel_arm_x",
"accel_arm_y",
"accel_arm_z",
"accel_dumbbell_x",
"accel_dumbbell_y",
"accel_dumbbell_z",
"accel_forearm_x",
"accel_forearm_y",
"accel_forearm_z",
"classe")
cols1 = c("user_name",
"accel_belt_x",
"accel_belt_y",
"accel_belt_z",
"accel_arm_x",
"accel_arm_y",
"accel_arm_z",
"accel_dumbbell_x",
"accel_dumbbell_y",
"accel_dumbbell_z",
"accel_forearm_x",
"accel_forearm_y",
"accel_forearm_z")
training = subset(training, select=c(cols))
testing = subset(testing, select=c(cols1))
dim(training)
dim(testing)
# ---------------------------------------------------------
# Building (fitting) the model with the training dataset
set.seed(1225)
modelFit = randomForest(classe ~ ., data=training, keep.forest=TRUE, importance=TRUE)
# See final model results
modelFit$finalModel
# Predict with the testing dataset
predictions = predict(modelFit, newdata=testing)
# See results of the predictions
# Should only retrieve 20 rows based on the testing dataset
predictions
# See "In Sample Errors (and error rate)
# Error rate = 19%; Accuracy = 81 %
modelFit$confusion
# ------------------------------------------------------
# -- See misclasification
# ------------------------------------------------------
getwd()
modelFit = randomForest(classe ~ ., data=training, keep.forest=TRUE, importance=TRUE)
require(thePackage)
require(randomforest)
require(randomForest)
# --- Machine Learning - Project submission code.
# ------------------------------------------------------------
# Read training CSV into R
training <- read.csv(file="pml-training.csv", header=TRUE, sep=",")
# Read testing CSV into R
testing <- read.csv(file="pml-testing.csv", header=TRUE, sep=",")
# ----------------------------------------------------------------------------------
# Load caret library
library(caret)
# Determine  the NON-relevant variables from the training set
# --------------------------------------------------------------
# nsv = nearZeroVar(training, saveMetrics=TRUE)
# Update the training data set with the relevant variables only.
# The original training data set has 160 columns, now it has only 100
# training = training[, which(nsv$nzv==FALSE)]
# testing = testing[, which(nsv$nzv==FALSE)]
# ----------------------------------------------
cols = c("user_name",
"accel_belt_x",
"accel_belt_y",
"accel_belt_z",
"accel_arm_x",
"accel_arm_y",
"accel_arm_z",
"accel_dumbbell_x",
"accel_dumbbell_y",
"accel_dumbbell_z",
"accel_forearm_x",
"accel_forearm_y",
"accel_forearm_z",
"classe")
cols1 = c("user_name",
"accel_belt_x",
"accel_belt_y",
"accel_belt_z",
"accel_arm_x",
"accel_arm_y",
"accel_arm_z",
"accel_dumbbell_x",
"accel_dumbbell_y",
"accel_dumbbell_z",
"accel_forearm_x",
"accel_forearm_y",
"accel_forearm_z")
training = subset(training, select=c(cols))
testing = subset(testing, select=c(cols1))
dim(training)
dim(testing)
# ---------------------------------------------------------
# Building (fitting) the model with the training dataset
set.seed(1225)
require(randomForest)
modelFit = randomForest(classe ~ ., data=training, keep.forest=TRUE, importance=TRUE)
# See final model results
modelFit$finalModel
# Predict with the testing dataset
predictions = predict(modelFit, newdata=testing)
# See results of the predictions
# Should only retrieve 20 rows based on the testing dataset
predictions
# See "In Sample Errors (and error rate)
# Error rate = 19%; Accuracy = 81 %
modelFit$confusion
# ------------------------------------------------------
# -- See misclasification
# ------------------------------------------------------
modelFit$confusion[1]
modelFit$confusion[2]
diag(modelFit$confusion)
-diag(modelFit$confusion)
1-diag(modelFit$confusion)
modelFit$confusion[-diag(modelFit$confusion),]
modelFit$confusion[diag(modelFit$confusion),]
diag(modelFit$confusion)
sum(modelFit$confusion)
sum(diag(modelFit$confusion))/sum(modelFit$confusion)
1-sum(diag(modelFit$confusion))/sum(modelFit$confusion)
